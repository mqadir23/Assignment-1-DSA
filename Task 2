#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <time.h>
using namespace std;

class Node {
public:
    unsigned int data; 
    Node* next;
    Node* prev; 

    Node(unsigned int data) {
        this->data = data;
        this->next = NULL;
        this->prev = NULL;
    }

    Node(string data) {
        try {
            if (data.size() > 10) {
                throw invalid_argument("Number is too large to store in 32-bit long integer");
            }
            unsigned long num = stoul(data);
            if (num > numeric_limits<unsigned int>::max()) {
                throw invalid_argument("Number is too large to store in 32-bit long integer");
            }
            this->data = static_cast<unsigned int>(num);
        }
        catch (const out_of_range& e) {
            cout << "Number is too large to store in 32-bit long integer" << endl;
            throw;
        }
        catch (const invalid_argument& e) {
            cout << "Invalid number format" << endl;
            throw;
        }
        this->next = nullptr;
        this->prev = nullptr;
    }


    int getNthDigit(int n) const{
        if (n < 0 || n > 9) { 
            cout << "Invalid digit number get" << endl;
            throw invalid_argument("N is not in the range of 0-8");
        }

        int temp = this->data;
        for (int i = 0; i < n; i++) {
            temp /= 10;
        }

        return temp % 10;
    }

    void setNthDigit(int n, int digit) {
        if (n < 0 || n > 9) {
            cout << "Invalid digit number set" << endl;
            throw invalid_argument("N is not in the range of 0-9");
        }

        if (digit < 0 || digit > 9) {
            cout << "Invalid digit value set" << endl;
            throw invalid_argument("Digit must be between 0 and 9");
        }

        int pow10 = static_cast<int>(pow(10, n)); 

        int currentDigit = (this->data / pow10) % 10;
        this->data = this->data - currentDigit * pow10 + digit * pow10;
    }


    int getLengthofInt() const {
        if (this->data == 0) return 1;
        int temp = this->data;
        int count = 0;
        while (temp > 0) {
            temp = temp / 10;
            count++;
        }
        return count;
    }


    void printNode() {
        int length = getLengthofInt();
        for (int i = length - 1; i >= 0; i--) {
            cout << getNthDigit(i);
        }
        cout << endl;
    }
    ~Node() {
	}

};

class LinkedList {
public:
    Node* head; 
    Node* tail; 

    LinkedList() {
        this->head = NULL;
        this->tail = NULL;
    }

    LinkedList(string data) {
        this->head = NULL;
        this->tail = NULL;
        int n = data.size() - 9;
        int block_size = 9;
        while (1) {
            if (n <= 0) {
                this->prependNode(data.substr(0, block_size + n));
                break;
            }
            this->prependNode(data.substr(n, block_size));
            n = n - block_size;
        }
    }

    bool operator<(LinkedList* list) {
        int n1 = this->get_num_digits();
        int n2 = list->get_num_digits();
        if (n1 < n2) {
            return true;
        }
        else if (n1 > n2) {
            return false;
        }
        Node* temp1 = this->head;
        Node* temp2 = list->head;
        while (temp1 != NULL && temp2 != NULL) {
            if (temp1->data < temp2->data) {
                return true;
            }
            else if (temp1->data > temp2->data) {
                return false;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        return false;
    }

    bool operator<(int n) {
        LinkedList* temp = new LinkedList(to_string(n));
        bool result = this->operator<(temp);
        delete temp;
        return result;
    }


    bool operator>(LinkedList* list) {
        int n1 = this->get_num_digits();
        int n2 = list->get_num_digits();
        if (n1 > n2) {
            return true;
        }
        else if (n1 < n2) {
            return false;
        }
        Node* temp1 = this->head;
        Node* temp2 = list->head;
        while (temp1 != NULL && temp2 != NULL) {
            if (temp1->data > temp2->data) {
                return true;
            }
            else if (temp1->data < temp2->data) {
                return false;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        return false;
    }

    bool operator>(int n) {
        return this->operator>(new LinkedList(to_string(n)));
    }

    bool operator==(LinkedList* list) {
        int n1 = this->get_num_digits();
        int n2 = list->get_num_digits();
        if (n1 != n2) {
            return false;
        }
        Node* temp1 = this->head;
        Node* temp2 = list->head;
        while (temp1 != NULL && temp2 != NULL) {
            if (temp1->data != temp2->data) {
                return false;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        return true;
    }

    bool operator==(int n) {
        return this->operator==(new LinkedList(to_string(n)));
    }

    void prependNode(string data) {
        Node* newNode = new Node(data);
        if (this->head == NULL) {
            this->head = newNode;
            this->tail = newNode;
        }
        else {
            this->head->prev = newNode;
            newNode->next = this->head;
            this->head = newNode;
        }
    }

    void prependNode(unsigned int data) {
        Node* newNode = new Node(data);
        if (this->head == NULL) {
            this->head = newNode;
            this->tail = newNode;
        }
        else {
            this->head->prev = newNode;
            newNode->next = this->head;
            this->head = newNode;
        }
    }

    void addNode(unsigned int data) {
        Node* newNode = new Node(data);
        if (this->head == NULL) {
            this->head = newNode;
            this->tail = newNode;
        }
        else {
            this->tail->next = newNode;
            newNode->prev = this->tail;
            this->tail = newNode;
        }
    }

    void addNode(string data) {
        Node* newNode = new Node(data);
        if (this->head == NULL) {
            this->head = newNode;
            this->tail = newNode;
        }
        else {
            this->tail->next = newNode;
            newNode->prev = this->tail;
            this->tail = newNode;
        }
    }

    void printList() {
        Node* temp = this->head;
        while (temp != NULL) {
            temp->printNode();
            temp = temp->next;
        }
        cout << endl;
    }

    void add_to_this_linked_list(LinkedList* list) {
        Node* temp1 = this->tail;
        Node* temp2 = list->tail;
        int carry = 0;
        while (temp1 != NULL && temp2 != NULL) {
            int sum = 0;
            for (int i = 0; i < 9; i++) {
                int digit1 = temp1->getNthDigit(i);
                int digit2 = temp2->getNthDigit(i);
                sum = digit1 + digit2 + carry;
                if (sum > 9) {
                    carry = 1;
                    sum = sum - 10;
                }
                else {
                    carry = 0;
                }
                temp1->setNthDigit(i, sum);
            }
            temp1 = temp1->prev;
            temp2 = temp2->prev;
        }

        while (temp2 != NULL) {
            if (carry) {
                this->prependNode(temp2->data + 1);
                carry = 0;
            }
            else {
                this->prependNode(temp2->data);
            }
            this->prependNode(temp2->data);
            temp2 = temp2->prev;
        }
    }

    int getNthdigit(int n) {
        if (n >= this->get_num_digits()) {
            return 0;
        }
        Node* temp = this->tail;
        int loc_within_node = n % 9;
        int node_number = n / 9;
        for (int i = 0; i < node_number; i++) {
            temp = temp->prev;
        }
        return temp->getNthDigit(loc_within_node);
    }

    void setNthdigit(int n, int digit) {
        Node* temp = this->tail;
        int loc_within_node = n % 9;
        int node_number = n / 9;
        for (int i = 0; i < node_number; i++) {
            temp = temp->prev;
        }
        temp->setNthDigit(loc_within_node, digit);
    }

    LinkedList* add_linked_list(LinkedList* list) {
        int l1 = this->get_num_digits();
        int l2 = list->get_num_digits();
        int to_ret_len = 0;

        if (l1 > l2) {
            to_ret_len = l1;
        }
        else {
            to_ret_len = l2;
        }
        string s(to_ret_len + 1, '0');
        LinkedList* to_ret = new LinkedList(s);
        int carry = 0;
        for (int i = 0; i < to_ret->get_num_digits(); i++) {
            int dig1 = this->getNthdigit(i);
            int dig2 = list->getNthdigit(i);
            int res = dig1 + dig2 + carry;
            carry = res / 10;
            to_ret->setNthdigit(i, res % 10);
        }
        while (to_ret->head->data == 0) {
            to_ret->head = to_ret->head->next;
            delete to_ret->head->prev;
        }
        return to_ret;
    }

    int get_num_digits() {
        int count = 0;
        Node* temp = this->head;
        while (temp != NULL) {
            count += 9;
            temp = temp->next;
        }
        return count;
    }

    LinkedList* subtract(LinkedList* list) {
        int l1 = this->get_num_digits();
        int l2 = list->get_num_digits();
        if (l1 < l2) {
            cout << "1st number is smaller than 2nd number" << endl;
            throw invalid_argument("1st number is smaller than 2nd number");
        }
        int to_ret_len = 0;
        if (l1 > l2) {
            to_ret_len = l1;
        }
        else {
            to_ret_len = l2;
        }
        string s(to_ret_len, '0');
        LinkedList* to_ret = new LinkedList(s);
        int borrow = 0;
        for (int i = 0; i < to_ret_len; i++) {
            int dig1 = this->getNthdigit(i);
            int dig2 = list->getNthdigit(i);
            int res = dig1 - dig2 - borrow;
            if (res < 0) {
                borrow = 1;
                res += 10;
            }
            else {
                borrow = 0;
            }
            to_ret->setNthdigit(i, res);
        }
        while (to_ret->head->data == 0 && to_ret->head->next != NULL) {
            to_ret->head = to_ret->head->next;
            delete to_ret->head->prev;
        }
        return to_ret;
    }

    LinkedList* multiply(LinkedList* list) {
        int n1 = this->get_num_digits();
        int n2 = list->get_num_digits();
        int totalDigits = n1 + n2;

        int* result = new int[totalDigits](); 

        int* num1 = new int[n1];
        int* num2 = new int[n2];

        for (int i = 0; i < n1; i++) {
            num1[i] = this->getNthdigit(n1 - i - 1);
        }
        for (int j = 0; j < n2; j++) {
            num2[j] = list->getNthdigit(n2 - j - 1);
        }

        for (int i = n1 - 1; i >= 0; i--) {
            for (int j = n2 - 1; j >= 0; j--) {
                int mul = num1[i] * num2[j];
                int sum = mul + result[i + j + 1];
                result[i + j + 1] = sum % 10;
                result[i + j] += sum / 10; 
            }
        }

        LinkedList* finalResult = new LinkedList();
        bool leadingZero = true;

        for (int i = 0; i < totalDigits; i++) {
            if (result[i] != 0) {
                leadingZero = false; 
            }
            if (!leadingZero) {
                finalResult->appendDigit(result[i]);
            }
        }

        delete[] num1;
        delete[] num2;
        delete[] result;

        return finalResult;
    }

    static LinkedList* divide(LinkedList* dividend, LinkedList* divisor) {
        if (divisor->operator==(0)) {
            throw invalid_argument("Division by zero is undefined.");
        }

        if (dividend->operator==(divisor)) {
            return new LinkedList("1");
        }
        if (dividend->operator<(divisor)) {
            return new LinkedList("0");
        }
        int l1 = dividend->get_num_digits();
        int l2 = divisor->get_num_digits();
        int to_ret_len;
        if (l1 < l2) {
            return new LinkedList("0");
        }
        else {
            to_ret_len = l1;
        }
        string s(to_ret_len, '0');
        LinkedList* result = new LinkedList(s);
        LinkedList* current = new LinkedList();

        for (int i = 0; i < l1; i++) {
            current->appendDigit(dividend->getNthdigit(dividend->get_num_digits() - i - 1));
            int x = 0;
            while (current->operator>(divisor) || current->operator==(divisor)) {
                current = current->subtract(divisor);
                x++;
            }
            result->setNthdigit(result->get_num_digits() - i - 1, x);
        }

        while (result->head->data == 0) {
            result->head = result->head->next;
            delete result->head->prev;
        }

        return result;
    }

    static LinkedList* mod(LinkedList* dividend, LinkedList* divisor) {
        if (dividend->operator==(divisor)) {
            return new LinkedList("0");  
        }
        if (dividend->operator<(divisor)) {
            return dividend;  
        }
        LinkedList* a = LinkedList::divide(dividend, divisor);
        LinkedList* b = a->multiply(divisor);
        LinkedList* result = dividend->subtract(b);
        delete a;
        delete b;
        return result;
    }

    static LinkedList* power(LinkedList* base, LinkedList* exp) {
        if (exp->operator==(0)) {
            return new LinkedList("1");
        }
        
        if (exp->operator==(1)) {
            return base;
        }

        LinkedList* result = new LinkedList("1"); 
        while (exp->operator>(0)) {
            // cout << " exp: ";
            // exp->printList();
            
            if (exp->getNthdigit(0) % 2 == 1) {
                result = result->multiply(base); 
            }
            base = base->multiply(base); 
            exp = LinkedList::divide(exp, new LinkedList("2")); 
        }

        return result; 
    }

    void appendDigit(int digit) {
        string s(this->get_num_digits() + 1, '0'); 
        LinkedList* temp = new LinkedList(s); 
        temp->setNthdigit(0, digit); 
        for (int i = 0; i < this->get_num_digits(); i++) {
            temp->setNthdigit(i + 1, this->getNthdigit(i));
        }
        Node* temp_node = this->head;
        while (this->head != NULL) {
            temp_node = this->head->next; 
            delete this->head; 
            this->head = temp_node; 
        }
        delete temp_node; 
        this->head = temp->head; 
        this->tail = temp->tail; 

        
        while (this->head->data == 0 && this->head->next != NULL) {
            this->head = this->head->next; 
            delete this->head->prev; 
        }
    }
    ~LinkedList() {
        Node* current = head;
        while (current != NULL) {
            Node* temp = current;
            current = current->next;
            delete temp;
        }
    }

};

bool miller_rabin_primality_test(LinkedList* n) {
    time_t t = time(NULL);

    if (n->operator==(2) || n->operator==(3)) {
        return true;
    }
    if (n->operator<(2) || n->getNthdigit(0) % 2 == 0) {
        return false;
    }

    LinkedList* d = n->subtract(new LinkedList("1"));
    int k = 0;
    while (d->getNthdigit(0) % 2 == 0) {
        d = LinkedList::divide(d, new LinkedList("2"));
        k++;
    }

    LinkedList* a = new LinkedList("2");
    LinkedList* x = LinkedList::mod(LinkedList::power(a, d), n);

    if (x->operator==(1) || x->operator==(n->subtract(new LinkedList("1")))) {
        delete d;
        delete a;
        delete x;
        time_t t2 = time(NULL);
        cout << "Time taken to process: " << t2 - t << " seconds" << endl;
        return true;
    }

    for (int i = 0; i < k - 1; i++) {
        x = LinkedList::mod(x->multiply(x), n);
        if (x->operator==(1)) {
            delete d;
            delete a;
            delete x;
            time_t t2 = time(NULL);
            cout << "Time taken: " << t2 - t << " seconds" << endl;
            return false;
        }
        if (x->operator==(n->subtract(new LinkedList("1")))) {
            delete d;
            delete a;
            delete x;
            time_t t2 = time(NULL);
            cout << "Time taken to process: " << t2 - t << " seconds" << endl;
            return true;
        }
    }

    delete d;
    delete a;
    delete x;
    time_t t2 = time(NULL);
    cout << "Time taken to process: " << t2 - t << " seconds" << endl;
    return false;
}

bool isValidNumber(const string& num) {
    for (char c : num) {
        if (!isdigit(c)) {
            return false;  
        }
    }
    return true;
}

int main() {
    string num_to_check; 
    char cont = 'y'; 
    while (cont == 'y') { 
        cout << "Enter the number to check for primality: "; 
        getline(cin, num_to_check);

        if (!isValidNumber(num_to_check)) {
            cout << "Invalid input! Please enter a valid number." << endl;
            continue;
        }

        LinkedList* num = new LinkedList(num_to_check); 
        if (miller_rabin_primality_test(num)) { 
            cout << "Probably prime" << endl; 
        }
        else {
            cout << "Not prime" << endl; 
        }

        delete num;
        cout << "Do you want to continue? (y/n): "; 
        cin >> cont; 
        cont = tolower(cont);
        cin.ignore(1000, '\n');
        cin.clear(); 
    }
}
